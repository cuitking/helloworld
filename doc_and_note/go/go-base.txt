Go是一门并发支持，垃圾回收的编译型系统编程语言。
特点：
1。类型安全和内存安全
2.以非常直观和极低代价的方案实现高并发。
3.高效的垃圾回收机制
4.快速编译(同时解决c语言头文件太多的问题)
5.为多核计算机提供性能提升方案，支持utf-8编码

根据约定，GOPATH下需要存放三个文件夹:
bin(存放编译后生成的可执行文件)
    mathapp
pkg(存放编译后生成的包文件)
    平台名/ 如:darwin_amd64, linux_amd64
        mymath.a
        github.com/
            astaxie
                beedb.a
src(存放项目源码)
    mathapp
        main.go
    mymatch/
        sqrt.go

go语言的命令
go get: 获取远程包
go run: 直接运行程序
go build: 测试编译,检查是否有编译错误
go fmt:格式化源码(IDE在自动保存时自动调用)
go install:编译包文件并编译整个程序
go test: 运行测试文件
go doc: 查看手册

go helloworld

sublime text3 打开命令行:ctrl + b

二 go基础知识
go的内置关键字: 
break, default, func, interface, select
case, defer, go, map, struct, chan, else,goto, package, switch,
const, fallthrough, if, range, type, continue, for, import, return, var

注释方法:
// :单行注释
/*...*/ : 多行注释

Go程序的一般结构: basic_structure.go
Go程序是通过package来组织的(和python类似)
只有package 名称为main的包可以包含main函数
一个可执行程序有且仅有一个main包

通过import关键字来导入其它非main包
通过const关键字来进行常量的定义
通过在函数体外部使用var关键字来进行全局变量的声明与赋值
通过type关键字来进行结构(struct)或接口(interface)的声明
通过func关键字来进行函数的声明


Go导入package的格式
import {
    "fmt"
    "io"
    "os"
}
如果导入包之后未调用其中的函数或者类型将会报出编译错误

package 别名
当使用第三方包时，包名可能会非常接近或者相同，此时可以使用别名来进行区别和调用
import {
    io "fmt"
}
io.Println("helloworld")
省略调用
import {
    . "fmt"
}
func main() {
    Println("Hello World!!!!!")
}
不建议使用,易混淆
不可以和别名同时使用

可见性规则
Go语言中,使用大小写来决定该常量,变量，类型，接口，结构或函数是否可以被外部包所调用
根据约定， 函数名首字母小写即为private
函数名首字母大写 即为public

常量定义,常量组
const (
	PI = 3.14
	const1 = "1"
	)
全局变量,var 组只能声明全局变量，不可以在函数体内使用
var (
	name = "gopher"
	name1 = "gopher1"
)
一般类型声明
type newType int
结构声明
type gopher struct{}
接口的声明
type golang interface{}

三 类型与变量

Go基本类型
bool: 长度1字节,取值范围:true, false
注意事项:不可以使用数字代表true或false
整型：int/uint
根据运行平台可能是32位或64位
字节型:byte(uint8别名)
32位整型:int32(rune)/uint32
浮点型:float32(精确到7位小数点)/float64(15位小数点)
足够保存指针的32位或64位整数型:uintptr
其他值类型: array, struct, string
引用类型:slice, map, chan(用于并发)
接口类型:interface
函数类型:func

类型零值
零值并不等于空值,而是当变量被声明为某种类型后的默认值，通常情况下值类型的默认值为0,
bool为false, string为空字符串.
类型别名
type (
	文本 string
)
func main() {
	var b 文本
	b = "文本类型"
}

单个变量的声明与赋值
变量的声明格式: var 变量名称 变量类型
变量的赋值: 变量名称 = 表达式
声明同时赋值: var 变量名 变量类型 = 表达式
var a int
a = 123
var b int= 321
var c = 321
d := 456(全局变量不可以使用)

多个变量的声明与赋值
全局变量的声明可以使用var()的方式进行简写
全局变量的声明不可以省略var,但可以使用并行方式
所有变量口可以使用类型推断
局部变量不可以使用var()的方式简写,只能使用并行方式
var a,b,c,d = 1,2,3,4

变量的类型转换
go中不存在隐式转换,所有类型转换必须显示声明
转换只能发生在两种相互兼容的类型之间
类型转换的格式:
<ValueA> [:] = <TypeOfValueA>(<ValueB>)
var a float32 = 1.1
b := int(a)

四 常量与运算符




