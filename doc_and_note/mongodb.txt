-----------------关系型数据库和非关系型数据库--------------

关系型数据库就是指采用了关系模型来组织数据的数据库.
简单说,关系模型指的就是二维表格模型,而一个关系型数据库就是由二维表及其之间的联系所组成的一个数据组织.

关系型数据库瓶颈：
高并发读写需求  事务一致性（开销大） 复杂SQL，特别是多表关联查询


非关系型数据库：(NoSQL)用于指代那些非关系型的，分布式的，且一般不保证遵循ACID原则的数据存储系统
非关系型数据库提出另一种理念，例如，以键值对存储，且结构不固定，每一个元组可以有不一样的字段，
每个元组可以根据需要增加一些自己的键值对，这样就不会局限于固定的结构，可以减少一些时间和空间的开销。使用这种方式，
用户可以根据需要去添加自己需要的字段，这样，为了获取用户的不同信息，不需要像关系型数据库中，要对多表进行关联查询。
仅需要根据id取出相应的value就可以完成查询。但非关系型数据库由于很少的约束，他也不能够提供像SQL所提供的where这种
对于字段属性值情况的查询。并且难以体现设计的完整性。他只适合存储一些较为简单的数据，对于需要进行较复杂查询的数据，
SQL数据库显的更为合适。

数据库事务必须具备ACID特性，ACID是Atomic原子性，Consistency一致性，Isolation隔离性，Durability持久性。

关系型数据库的最大特点就是事务的一致性：传统的关系型数据库读写操作都是事务的
关系数据库的另一个特点就是其具有固定的表结构，因此，其扩展性极差，而在SNS中，系统的升级，功能的增加，往往意味着
数据结构巨大变动，这一点关系型数据库也难以应付，需要新的结构化数据存储

非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合。
必须强调的是，数据的持久存储，尤其是海量数据的持久存储，还是需要一种关系数据库这员老将。

NoSQL的分类:
面向高性能并发读写的key-value数据库：
key-value数据库的主要特点即使具有极高的并发读写性能，Redis,Tokyo Cabinet,Flare就是这类的代表
面向海量数据访问的面向文档数据库：
这类数据库的特点是，可以在海量的数据中快速的查询数据，典型代表为MongoDB以及CouchDB
面向可扩展性的分布式数据库：
这类数据库想解决的问题就是传统数据库存在可扩展性上的缺陷，这类数据库可以适应数据量的增加以及数据结构的变化

mongoDB是一个可扩展，开源，表结构自由，用c++语言编写且面向文档的数据库。是一个介于关系型数据库和非关系型数据库之间的产品。


-----------------mongodb------------
复制一个collection 到另一个集合的collection
use sourcedatabase;
var docs=db.sourcetable.find();
use targetdatabase;
docs.forEach(function(doc) { db.targettable.insert(doc); });


连接mongodb数据库
mongo.exe 172.27.1.5:27017


help:显示帮助

show dbs; 显示数据库
use <db_name> ;切换数据库  // use GameConfig-hf;


----------------mongodb允许远程访问--------------------
http://ju.outofmemory.cn/entry/150644
1.绑定ip
vim /etc/mongod.conf
默认情况下,MongoDB绑定到本地接口,它将限制远程连接。如果你不关心安全,只是注释掉接受任何远程连接(不推荐)。

---------------------------------------
查询course表中，存在lectures_count字段的记录信息

db.course.find( { "lectures.lectures_count": { $exists: true } } )
删除course表中，所有的lectures.lectures_count字段

db.course.update({},{$unset:{"lectures.lectures_count":""}},{multi:true})
根据条件往表里插入一个字段

db.lecture.update({"course_id":"5352d5ab92fc7705666ae8c9"},{$set:{"file_type":"PDF"}},{multi:true})
查询某个字段（pps_base）

db.album.find({"_id" : NumberLong(200068901)},{"pps_base":true})






