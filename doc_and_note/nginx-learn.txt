1.编译nginx
 1.下载:  wget http://nginx.org/download/nginx-1.14.2.tar.gz
 2.解压 tar -xzf nginx-1.14.2.tar.gz
 3.目录 
	conf 配置示例文件.
	contrib/vim  vim配置文件，识别nginx 配置文件语法. cp -r contrib/vim* ~/.vim/
	html 定位错误和默认访问文件
	man 帮助文档
	src nginx 源代码
 4.编译nginx
	查看configure 支持选项 
	./configure --help
	编译并指定安装目录
	./configure --prefix=/usr/local/nginx
	/*
	报错: the HTTP rewrite module requires the PCRE library
	yum -y install zlib zlib-devel openssl openssl--devel pcre pcre-devel
	*/
	执行生成的中间文件在objs下. ngx_modules.c 包含了哪些模块会被编译到nginx。
	make
	如果是升级，还不能执行make install,需要把objs/nginx 拷贝到可执行文件目录中.
	初次安装执行 make install.
2.配置nginx conf语法.
3.nginx 命令行
nginx -c /usr/local/nginx/conf/nginx.conf 启动
nginx -s reload
nginx -t 测试配置文件
nginx -v -V 查看编译配置文件.
kill -USER2 nginx-master pid
kill -WINCH nginx-master pid ---优雅的推出
日志切割.
先拷贝 cp aaa.log bak.log/ mv aaa.log bak.log
再执行 nginx -s reopen

提供重新打开日志 不会丢日志方式
#!/bin/bash
#设置日志文件存放目录
logs_path="/alidata/log/nginx/access/"
DAYS=30
#设置pid文件
pid_path="/alidata/server/nginx/logs/nginx.pid"
#重命名日志文件
mv ${logs_path}default.log ${logs_path}default-access_$(date -d "yesterday" +"%Y%m%d").log
#向nginx主进程发信号重新打开日志
kill -USR1 `cat ${pid_path}`
find ${logs_path} -name "default-access_*.log" -type f -mtime +$DAYS -exec rm {} \

11 搭建一个静态资源文件web.
 配置nginx
 打开 nginx gzip 选项
 gzip on;
 gzip_min_length 1; // 最小字节
 gzip_comp_level 2; // 压缩级别
 gzip_types text/plain ; //对什么格式的文件使用gzip 压缩.
 
 autoindex 选项 提供当访问/结尾的url时，显示对应目录结构,只能访问alias文件夹下的目录结构
 local / {
	alias /data/vshtml/;
	autoindex on;
 }
 设置用户范围速度
 set $limit_rate 1k;
 local / {
	set $limit_rate 1k;
 }
 设置日志输出格式化
 log_format main(命名) '$remote_addr - ....'
 main 可以对不同域名写不同的日志
12 nginx 搭建具有缓存功能的反向代理
 设置 listen 127.0.0.1:8080 //表示只有本地的进程才能访问这个端口
 配置项 upstream 设置上游服务器
 upstream local {
	server 127.0.0.1:8080;
 }
 在location / {
	proxy_set_header Host $host; // 用户输入的域名
	proxy_set_header X-Real-IP $remote_addr; // 将远端客户端的ip传给上游服务器. proxy_set_header 
											// 是将远端客户端的变量取出传给上游服务器处理.
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	
	proxy_pass http://local;  //反向代理到 upstream 上游服务器.
	//这些可以在官网的doc中 nginx_http_proxy_module 中找到
 }
 配置缓存服务器.
  配置缓存文件写在哪个目录下 
  proxy_cache_path  /tmp/nginxcache levels=1:2 keys_zone=my_cache:10m max_size=10g
		inactive=60m use_temp_path=off;
  在需要使用的server中配置
  location / {
	proxy_cache my_cache;
	
	proxy_cache_key $host$uri$is_args$args;
	proxy_cache_valid 200 304 302 1d;

	proxy_pass http://local;
  }
 13 使用goAccess可视化监控access日志.
   1.下载源码包:wget https://tar.goaccess.io/goaccess-1.3.tar.gz
   2. tar -xzvf goaccess-1.3.tar.gz
   3. $ cd goaccess-1.3/
   4 ./configure --enable-utf8 --enable-geoip=legacy  
   ./configure --enable-utf8 --enable-geoip=legacy --with-openssl
   ( configure 报错 *** Missing development files for the GeoIP library,    
    yum install GeoIP-devel
	 安装openssl:  yum -y install openssl openssl-devel
	)
   5 .make
   6 .make install
   安装完成检查版本
   goaccess --v
   执行goaccess 
   goaccess access.log -o ../html/report.html --real-time-html --time-format='%H:%M:%S' --date-format='%d/%b/%Y' --log-format=COMBINED
   显示 WebSocket server ready to accept new client connections
   在nginx中配置
   location /report-p8080.html {
	alias /usr/local/nginx/html/report-p8080.html;
   }
   ---默认goaccess在开启实时real-time-html后会监听端口7890的websocket，如果服务器不允许请求7890端口，
   你就看不到那个页面是实时更新的——你会发现访问的页面最后更新时间始终不变。这一点人很多忽略了，
   很多人以为是哪个生成html静态文件是实时更新的，其实根本不是，那个文件本身一旦生成就不动了，
   真正更新的实时内容是从websocket过来的
14  从网络原理来看SSL 安全协议
	SSL --- Secure Socket Layer
	TLS --- Transport Layer Secure
    ssl/TLS 作用于 OSI模型的表示层, tcp/ip模型的应用层，通过握手，交换秘钥，告警，对称加密的应用数据，记录等
	过程.
	TLS安全密码套件配置
	TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
	ECDHE ---秘钥交换 RSA---身份验证  AES --算法 128 ---强度 GCM ---模式 SHA256 ---MAC或PRF
	密码(AES_128_GCM)
15 对称加密算法和非对称加密算法
	对称加密 使用同一个密文进行加密解密.
	非对称加密 使用公钥加密，私钥解密 
16 SSL的证书的公信力是如何保证
17 SSL 协议握手时, nginx的性能瓶颈在哪?
	TLS 通讯过程
		1.验证身份
		2.达成安全套件共识
		3.传递秘钥
		4.加密通讯
18 用免费的SSL证书实现一个https 站点
	安装工具 yum install python2-certbot-nginx
	
19 基于OpenResty 用lua语言实现简单的服务
	1.前往OpenResty官网 
	2.下载源码 wget https://openresty.org/download/openresty-1.13.6.2.tar.gz
	3.编译openresty 
	 ./configure 
	 make
	 make install
	4.添加lua代码.
	在nginx.conf 中添加
	location /lua {
		default_type text/html;
		content_by_lua 'ngx.say("User-Agent: ", ngx.req.get_headers()["User-Agent"])';
		
	}
20.nginx的请求处理流程
21.nginx的进程结构
   nginx 有单进程结构和多进程结构，单进程结构适用于调试环境，多进程结构适用于生产环境.
   包括master进程，worker进程，cache manager, cache loader(缓存载入)
   master进程用来管理所有的worker进程，各进程之间通讯采用共享内存. 通常配置cpu核数相等的worker进程数.
22.nginx 进程结构实例演示.
	
23.
	
   




	